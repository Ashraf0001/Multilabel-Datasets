import torch
import torch.nn as nn
import torch.nn.functional as F

class MiniResNet(nn.Module):
    def __init__(self, num_classes=5):
        super(MiniResNet, self).__init__()

        # Initial Convolution Layer
        self.conv1 = nn.Conv2d(6, 32, kernel_size=3, stride=1, padding=1)  
        self.bn1 = nn.BatchNorm2d(32)

        # Residual Block 1
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.bn2 = nn.BatchNorm2d(64)
        self.conv3 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1)
        self.bn3 = nn.BatchNorm2d(64)

        # Residual Block 2
        self.conv4 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.bn4 = nn.BatchNorm2d(128)
        self.conv5 = nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1)
        self.bn5 = nn.BatchNorm2d(128)

        # Global Average Pooling
        self.global_pool = nn.AdaptiveAvgPool2d((1, 1))

        # Fully Connected Layer
        self.fc = nn.Linear(128, num_classes)

    def forward(self, x):
        x = F.relu(self.bn1(self.conv1(x)))

        # Residual Block 1
        identity = x
        x = F.relu(self.bn2(self.conv2(x)))
        x = self.bn3(self.conv3(x))
        x += identity  # Skip connection
        x = F.relu(x)

        # Residual Block 2
        identity = x
        x = F.relu(self.bn4(self.conv4(x)))
        x = self.bn5(self.conv5(x))
        x += identity  # Skip connection
        x = F.relu(x)

        # Global Average Pooling
        x = self.global_pool(x)
        x = torch.flatten(x, 1)
        
        # Fully Connected Layer
        x = self.fc(x)
        return x
